// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResumeApp.Data;

#nullable disable

namespace ResumeApp.Data.Migrations
{
    [DbContext(typeof(ResumeAppDbContext))]
    [Migration("20240409040035_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ResumeApp.Data.Entities.DegreeType", b =>
                {
                    b.Property<long>("DegreeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DegreeTypeId"));

                    b.Property<string>("DegreeTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DegreeTypeId");

                    b.ToTable("DegreeTypes");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Education", b =>
                {
                    b.Property<long>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EducationId"));

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("DegreeTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("GraduationYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<long>("ResumeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UniversityId")
                        .HasColumnType("bigint");

                    b.HasKey("EducationId");

                    b.HasIndex("DegreeTypeId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Job", b =>
                {
                    b.Property<long>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("ResumeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("JobId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("StateId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.JobAchievement", b =>
                {
                    b.Property<long>("JobAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobAchievementId"));

                    b.Property<string>("JobAchievementDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("JobAchievementId");

                    b.HasIndex("JobId");

                    b.ToTable("JobAchievements");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Person", b =>
                {
                    b.Property<long>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PersonId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("StreetLineOne")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetLineTwo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PersonId");

                    b.HasIndex("StateId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.ProgrammingLanguage", b =>
                {
                    b.Property<long>("ProgrammingLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProgrammingLanguageId"));

                    b.Property<string>("ProgrammingLanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProgrammingLanguageId");

                    b.ToTable("ProgrammingLanguages");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Resume", b =>
                {
                    b.Property<long>("ResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ResumeId"));

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ResumeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.ResumeProgrammingLanguageAssociation", b =>
                {
                    b.Property<long>("ResumeProgrammingLanguageAssociationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ResumeProgrammingLanguageAssociationId"));

                    b.Property<long>("ProgrammingLanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResumeId")
                        .HasColumnType("bigint");

                    b.HasKey("ResumeProgrammingLanguageAssociationId");

                    b.HasIndex("ProgrammingLanguageId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeProgrammingLanguageAssociations");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.ResumeServerAssociation", b =>
                {
                    b.Property<long>("ResumeServerAssociationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ResumeServerAssociationId"));

                    b.Property<long>("ResumeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServerId")
                        .HasColumnType("bigint");

                    b.HasKey("ResumeServerAssociationId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("ServerId");

                    b.ToTable("ResumeServerAssociations");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.ResumeTechnologyAssociation", b =>
                {
                    b.Property<long>("ResumeTechnologyAssociationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ResumeTechnologyAssociationId"));

                    b.Property<long>("ResumeId")
                        .HasColumnType("bigint");

                    b.Property<long>("TechnologyId")
                        .HasColumnType("bigint");

                    b.HasKey("ResumeTechnologyAssociationId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("ResumeTechnologyAssociations");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Server", b =>
                {
                    b.Property<long>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ServerId"));

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServerId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.State", b =>
                {
                    b.Property<long>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StateId"));

                    b.Property<string>("StateAbbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Technology", b =>
                {
                    b.Property<long>("TechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TechnologyId"));

                    b.Property<string>("TechnologyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TechnologyId");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.University", b =>
                {
                    b.Property<long>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UniversityId"));

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UniversityId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Education", b =>
                {
                    b.HasOne("ResumeApp.Data.Entities.DegreeType", "DegreeType")
                        .WithMany("Educations")
                        .HasForeignKey("DegreeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ResumeApp.Data.Entities.Resume", "Resume")
                        .WithMany("Educations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ResumeApp.Data.Entities.University", "University")
                        .WithMany("Educations")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DegreeType");

                    b.Navigation("Resume");

                    b.Navigation("University");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Job", b =>
                {
                    b.HasOne("ResumeApp.Data.Entities.Resume", "Resume")
                        .WithMany("Jobs")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ResumeApp.Data.Entities.State", "State")
                        .WithMany("Jobs")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.JobAchievement", b =>
                {
                    b.HasOne("ResumeApp.Data.Entities.Job", "Job")
                        .WithMany("JobAchievements")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Person", b =>
                {
                    b.HasOne("ResumeApp.Data.Entities.State", "State")
                        .WithMany("People")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Resume", b =>
                {
                    b.HasOne("ResumeApp.Data.Entities.Person", "Person")
                        .WithMany("Resumes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.ResumeProgrammingLanguageAssociation", b =>
                {
                    b.HasOne("ResumeApp.Data.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("ResumeProgrammingLanguagesAssociations")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ResumeApp.Data.Entities.Resume", "Resume")
                        .WithMany("ResumeProgrammingLanguageAssociations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProgrammingLanguage");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.ResumeServerAssociation", b =>
                {
                    b.HasOne("ResumeApp.Data.Entities.Resume", "Resume")
                        .WithMany("ResumeServerAssociations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ResumeApp.Data.Entities.Server", "Server")
                        .WithMany("ResumeServerAssociations")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.ResumeTechnologyAssociation", b =>
                {
                    b.HasOne("ResumeApp.Data.Entities.Resume", "Resume")
                        .WithMany("ResumeTechnologyAssociations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ResumeApp.Data.Entities.Technology", "Technology")
                        .WithMany("ResumeTechnologyAssociations")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.DegreeType", b =>
                {
                    b.Navigation("Educations");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Job", b =>
                {
                    b.Navigation("JobAchievements");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Person", b =>
                {
                    b.Navigation("Resumes");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.ProgrammingLanguage", b =>
                {
                    b.Navigation("ResumeProgrammingLanguagesAssociations");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Resume", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Jobs");

                    b.Navigation("ResumeProgrammingLanguageAssociations");

                    b.Navigation("ResumeServerAssociations");

                    b.Navigation("ResumeTechnologyAssociations");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Server", b =>
                {
                    b.Navigation("ResumeServerAssociations");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.State", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("People");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.Technology", b =>
                {
                    b.Navigation("ResumeTechnologyAssociations");
                });

            modelBuilder.Entity("ResumeApp.Data.Entities.University", b =>
                {
                    b.Navigation("Educations");
                });
#pragma warning restore 612, 618
        }
    }
}
